#!/bin/bash
# shellcheck disable=SC2059
# Steamy Cats is a script to organize your Steam library

# You can set variables here, or pass command line arguments
# Check --help to learn how to set the below variables
WIPE_CONFIG="false"
CLEAN_DLS="false"
FRESH_CONFIG="false"
USERNUM="false"
VDFOVERRIDE="false"
WEBACCNUM="false"
COMM_DOWNLOAD="false"
INCLUDE_FILE="$HOME/.config/Steamy_Cats/include.conf"
EXCLUDE_FILE="$HOME/.config/Steamy_Cats/exclude.conf"

#######################################################################################
#### Start Script (No variables below here)                                        ####
#######################################################################################

set -uEeo pipefail

# Since we go pretty ham with parallel operations
renice 19 $$ > /dev/null

if ! type jq > /dev/null; then
  echo Script requires jq to be installed; exit 1; fi
if ! type git > /dev/null; then
  echo Script requires git to be installed; exit 1; fi

this_command="false"
previous_command="false"
trap 'previous_command=$this_command; this_command=$BASH_COMMAND' DEBUG
trap 'rm -rf "/var/tmp/Steamy_Cats/"' EXIT
trap '(echo "Exit Code: $? ~~ Last Command: $previous_command" ; exit 1)' ERR

rm -rf /var/tmp/Steamy_Cats/
mkdir -p /var/tmp/Steamy_Cats/fragments/ /var/tmp/Steamy_Cats/rewrites/

# See bottom of script for main function

#######################################################################################
#### Parse Steam config and make game files                                        ####
#######################################################################################

parse_config() {
  community_profile() {
    local appid games_list
    if [ "$COMM_DOWNLOAD" == "false" ]
    then
      echo "Downloading your community profile, if public, and then getting full list of games you own"
      if ! curl -sLo /var/tmp/Steamy_Cats/Community_Profile "https://steamcommunity.com/profiles/$WEBACCNUM/games/?tab=all" ; then
        echo "Failed to download community profile" ; exit 1 ; fi
    else
      cp "$COMM_DOWNLOAD" /var/tmp/Steamy_Cats/Community_Profile || (echo "Failed to copy community profile" ; exit 1)
    fi

    # Find the JSON containing our games, then extract the APP ID with JQ
    games_list="$(grep "var rgGames" /var/tmp/Steamy_Cats/Community_Profile | \
      sed -e 's/var rgGames \= \[//' -e 's/\]\;//' -e 's/\,[{]/\n\{/g' | jq '.appid' | grep '[0-9]')"
    if [ "$games_list" == "" ]
    then
      tput bold
      echo "Is your community profile private? Check in a private browser: https://steamcommunity.com/id/yourid/games/?tab=all"
      echo "You can download the file manually and run the script with --comm-html=/path/to/file"
      echo "Alternatively, you can add all games to a group so they show up in your local configuration"
      tput sgr0
    else
      while read -r appid
      do
        {
          printf "\t\t\t\t\t\"%s\"\n" "$appid"
          printf "\t\t\t\t\t{\n"
          printf "\t\t\t\t\t\t\"%s\"\n" "tags"
          printf "\t\t\t\t\t\t{\n"
        } > /var/tmp/Steamy_Cats/fragments/"$appid"
      done <<< "$games_list"
    fi
    echo -n "$(wc -w <<< "$games_list") games in profile :: "
  }

  copy_config() {
    local apps_section games tags_missing check_tags
    if [ "$WIPE_CONFIG" == "true" ] ; then
      # Skip closing brackets
      # Match "Apps", set f=1 then go to next record (do not print)
      # Check for f and then match "[0-9]+", set n=1, print, go next record
      # check for n and then match a certain number of tabs and }, n=0 and f=0
      # check for n, print if it is present
      # Requires pgrep with lookahead support to preserve favorites
      apps_section=$(awk '/^\t\t\t\t\t}$/{next}
      /^\t\t\t\t\t\t}$/{next}
      /^\t\t\t\t"Apps"$/{f=1;next}
      f&&/^\t\t\t\t\t"[0-9]+"$/{n=1;print;next}
      n&&/^\t\t\t\t}$/{n=0;f=0} ; n' "$1" |\
        grep -Pv $'\t\t\t\t\t\t\t\"\d*\"\t\t\"(?!favorite)')
    else
      # We are removing categories we create here
      apps_section=$(awk '/^\t\t\t\t\t}$/{next}
      /^\t\t\t\t\t\t}$/{next}
      /^\t\t\t\t"Apps"$/{f=1;next}
      f&&/^\t\t\t\t\t"[0-9]+"$/{n=1;print;next}
      n&&/^\t\t\t\t}$/{n=0;f=0} ; n' "$1" |\
        grep -v -e '"TAGS ' -e '"SFLAGS ' -e '"APP ' -e '"PDB ' -e '"RELEASE ' -e '"REVIEW ')
    fi

    awk '/^\t\t\t\t\t"[0-9]+"$/ {split($0,a,"\"");print > "/var/tmp/Steamy_Cats/fragments/"a[2];next}
    {print >> "/var/tmp/Steamy_Cats/fragments/"a[2]}' <<< "$apps_section"

    check_tags="$(cd /var/tmp/Steamy_Cats/fragments/ &&\
      grep -L $'\t\t\t\t\t\"tags\"' -- *)"
    if [ "$check_tags" != "" ] ; then
      while read -r tags_missing ; do
        printf "\t\t\t\t\t\t\"tags\"\n" >> /var/tmp/Steamy_Cats/fragments/"$tags_missing"
        printf "\t\t\t\t\t\t{\n" >> /var/tmp/Steamy_Cats/fragments/"$tags_missing"
      done <<< "$check_tags"
    fi

    games=$(grep $'^\t\t\t\t\t\"[0-9]' <<< "$apps_section" | cut -d\" -f2)
    echo "Preserved configuration for $(wc -w <<< "$games") games."
  }

  community_profile || (echo "Failed to write community profile" ; exit 1)

  if [ "$FRESH_CONFIG" == "true" ] ; then
    echo ; return
  else
    copy_config "$@" || (echo "Failed to copy old configuration" ; exit 1)
  fi
}

#######################################################################################
#### Download Game Details from Steam Store                                        ####
#######################################################################################

download_store() {
  local DLOC="$HOME/.local/share/steam_store_frontend/" \
  TLOC="https://store.steampowered.com/app/" \
  NUMEXISTS=0 DOWNLOADING=0 DL_LIST="" GREPCOUNT DOWNLOADED=0 \
  DL_COUNT SLEEP_NOW i

  cleandls() {
    cd "$DLOC" || (echo "Download location does not exist." ; exit 1)
    if grep -q '>Error<' -- *
    then
      grep -Zl '>Error<' -- * | xargs --null rm
    fi

    # Files from being rate limited should be deleted
    if grep -q '>Access Denied<' -- *
    then
      GREPCOUNT=$(grep 'TITLE>Access Denied<' -- *)
      echo "Deleting $(wc -l <<< "$GREPCOUNT") files"
      grep -Zl '>Access Denied<' -- * | xargs --null rm
    fi

    # This is set through a CLI switch
    if [ "$CLEAN_DLS" == "true" ]
    then
      if grep -q '~FAILED~' -- *
      then
        grep -Zl '~FAILED~' -- * | xargs --null rm
      fi

      # Corrupt downloads
      find "$DLOC" -size -27c -type f -delete
      find "$DLOC" -empty -type f -delete
    fi
  }

  mkdir -p "$DLOC"
  cleandls

  # We gather the list of files to be downloaded
  cd /var/tmp/Steamy_Cats/fragments || (echo "Our fragment location is missing" ; exit 1)
  for i in *
  do 
    if [ ! -e "$DLOC""$i".html ]
    then
      DL_LIST="$DL_LIST $i"
      let DOWNLOADING=$DOWNLOADING+1
    else
      let NUMEXISTS=$NUMEXISTS+1
    fi
  done

  if [ "$(wc -w <<< "$DL_LIST")" -lt 1 ]
  then
    echo "All downloads completed already, run with --clean-dls if you want to force redownload"
  else
    if [ "$(wc -w <<< "$DL_LIST")" -gt 25 ]
    then
      echo "Downloading $(wc -w <<< "$DL_LIST") files" && echo
    else
      echo "Downloading files for these game IDs: $DL_LIST" && echo
    fi

    for i in $DL_LIST
    do
      let DOWNLOADED=$DOWNLOADED+1

      # We check to see if we have 10 downloads going here
      # This is due to Steam rate limiting our downloads
      let SLEEP_NOW=$DOWNLOADED%10
      if [[ $SLEEP_NOW -eq 0 ]]
      then
        let DL_COUNT=$DOWNLOADED-1
        tput cuu 1 && tput el # Using this to overwrite previous line
        echo "SLEEPING (DL RATE LIMIT) $DL_COUNT downloads started of $DOWNLOADING total"
        wait
        sleep 1
      fi

      curl -L --cookie "mature_content=1 ; birthtime=-729000000" -s -o "$DLOC""$i".html "$TLOC$i" &
      tput cuu 1 && tput el # Using this to overwrite previous line
      echo "$DOWNLOADED downloads started of $DOWNLOADING total"
    done

    wait

    cleandls
    echo "Downloads complete for the Store Frontend."
  fi
}

#######################################################################################
#### Make Categories                                                               ####
#######################################################################################

make_categories() {
  local line="\t\t\t\t\t\t\t\"%s\"\t\t\"%s\"\n"

  write_proton_db_scores() {
    local pdb_mean pdb_mode

    # Mode
    if ! grep -q "^$1," /var/tmp/Steamy_Cats/PDB.csv
    then
      printf "$line" "301" "PDB UNRATED" >> /var/tmp/Steamy_Cats/fragments/"$1"
      return
    else
      pdb_mode="$(grep "^$1," /var/tmp/Steamy_Cats/PDB.csv | sort | uniq -c | sort -nr | head -n1 | cut -d, -f2)"
      printf "$line" "301" "PDB MODE $pdb_mode" >> /var/tmp/Steamy_Cats/fragments/"$1"
    fi

    # Mean
    pdb_mean="$(grep "^$1," /var/tmp/Steamy_Cats/PDB.csv |\
      sed -e 's/Platinum/4/' -e 's/Gold/3/' -e 's/Silver/2/' -e 's/Bronze/1/' -e 's/Borked/0/' |\
      awk -F "," '{n++;sum+=$2} END {print n? int((sum/n)+.5) :"Error"}' |\
      sed -e 's/4/Platinum/' -e 's/3/Gold/' -e 's/2/Silver/' -e 's/1/Bronze/' -e 's/0/Borked/'
    )" # I have a feeling this whole thing can be done in awk, so that is a todo
    printf "$line" "302" "PDB MEAN $pdb_mean" >> /var/tmp/Steamy_Cats/fragments/"$1"
  }

  finalize_fragments() {
    local all_checked game_needs_all which_game
    cd /var/tmp/Steamy_Cats/fragments/ || (echo "Our fragment location is missing" ; exit 1)
    #      echo "~FAILED~" > "$HOME/.local/share/steam_store_frontend/$1.html"

    # Writing the ALL group where it is missing
    all_checked="$(grep -L '"ALL"' -- *)"
    if [ "$all_checked" != "" ] ; then
      while read -r game_needs_all ; do
        printf "$line" "330" "ALL" >> /var/tmp/Steamy_Cats/fragments/"$game_needs_all"
      done <<< "$all_checked"
    fi

    # Writing the closing brackets
    for which_game in * ; do
      printf "\t\t\t\t\t\t}\n" >> /var/tmp/Steamy_Cats/fragments/"$which_game"
      printf "\t\t\t\t\t}\n" >> /var/tmp/Steamy_Cats/fragments/"$which_game"
    done
  }

  linux_native() {
    local which_game
    grep -Hl 'data-os="linux">' -- * | cut -d. -f1 > /var/tmp/Steamy_Cats/Linux
    grep -m1 -H '<div class="game_area_purchase_platform">' -- * |\
      grep '<span class="platform_img linux">' | cut -d. -f1 >> /var/tmp/Steamy_Cats/Linux
    curl -s https://raw.githubusercontent.com/SteamDatabase/SteamLinux/master/GAMES.json |\
      cut -d\" -f2 "$HOME"/.local/share/SteamLinux.json | grep '[0-9]' >> /var/tmp/Steamy_Cats/Linux

    while read -r which_game ; do
      if [ -f /var/tmp/Steamy_Cats/fragments/"$which_game" ] ; then
        printf "$line" "301" "APP NATIVE LINUX" >> /var/tmp/Steamy_Cats/fragments/"$which_game"
      fi
    done <<< "$(sort -u /var/tmp/Steamy_Cats/Linux)"
  }

  pdb_if_not_linux() {
    local which_game
    while read -r which_game ; do
      write_proton_db_scores "$which_game" || (echo "ProtonDB score failed" ; exit 1) &
    done <<< "$(cd /var/tmp/Steamy_Cats/fragments/ && grep -L LINUX -- *)"
    wait
  }

  rel_date() {
    local which_game rel_year
    while IFS="." read -r which_game rel_year ; do
      if [ -f /var/tmp/Steamy_Cats/fragments/"$which_game" ] ; then
        printf "$line" "340" "RELEASE $rel_year" >> /var/tmp/Steamy_Cats/fragments/"$which_game"
      fi
    done <<< "$(grep -H "<b>Release Date:" -- * | sed -nr 's/([0-9]*\.).*([0-9]{4}).*/\1\2/p')"
  }

  reviews() {
    local which_game rev_score
    while IFS="~" read -r which_game rev_score ; do
      if [ -f /var/tmp/Steamy_Cats/fragments/"$which_game" ] ; then
        printf "$line" "350" "REVIEW $rev_score" >> /var/tmp/Steamy_Cats/fragments/"$which_game"
      fi
    done <<< "$(grep -HA1 "Overall Reviews:" -- * | grep "game_review_summary" | grep -v "Need more user reviews" | sed 's/\..*\">/~/' | cut -d\< -f1)"
  }

  flag_adult() {
    local which_game
    while read -r which_game ; do
      if [ -f /var/tmp/Steamy_Cats/fragments/"$which_game" ] ; then
        printf "$line" "320" "SFLAGS ADULT" >> /var/tmp/Steamy_Cats/fragments/"$which_game"
      fi
    done <<< "$(grep -l "You must login to see this content." -- *.html | cut -d. -f1)"
  }

  user_tags() {
    local values countnum val
    while IFS="," read -ra values ; do
      if [ ! -f /var/tmp/Steamy_Cats/fragments/"${values[0]}" ] ; then
        continue
      else
        countnum=200
        for val in "${values[@]:1}"; do
          printf "$line" "$countnum" "TAGS $val" >> /var/tmp/Steamy_Cats/fragments/"${values[0]}"
          let countnum++
        done
      fi
    done <<< "$(grep "\[{\"tagid\":" -- * |\
      sed -E -e 's/\],/]}/' -e 's/\.html://' -e 's/([0-9]+)/{"\1":/' |\
      jq -cr 'keys[] as $keys | .[] | [$keys, .[].name] | join(",")')"
  }

  store_flags() {
    local values countnum val
    while IFS="," read -ra values ; do
      if [ ! -f /var/tmp/Steamy_Cats/fragments/"${values[0]}" ] ; then
        continue
      else
        countnum=100
        for val in "${values[@]:1}"; do
          printf "$line" "$countnum" "SFLAGS $val" >> /var/tmp/Steamy_Cats/fragments/"${values[0]}"
          let countnum++
        done
      fi
    done <<< "$(grep -F 'game_area_details_specs"' -- * |\
      grep -Eo -e '^[0-9]+' -e 'class="name"[^\>]*\>[^\<]*' |\
      cut -d\> -f2 | tr '\n' ',' | sed -E 's/([0-9]+)/\n\1/g' |\
      awk 'length' | sed 's/,$//')"
  }

  echo "Adding new category tags to the games!"
  cd "$HOME"/.local/share/steam_store_frontend/ || (echo "Downloads location does not exist, can't parse" ; exit 1)
  linux_native && pdb_if_not_linux
  rel_date
  reviews
  flag_adult
  user_tags
  store_flags
  finalize_fragments
}

#######################################################################################
#### ProtonDB Ratings                                                              ####
#######################################################################################

download_proton_db() {
  local YEAR MONTH PDBLOC="$HOME/.local/share/protondb-data/" \
    TAR_FILENAME

  check_pdb() {
    if [ ! -d "$PDBLOC" ]
    then
      cd "$HOME"/.local/share/ || (echo ".local/share does not exist, exiting" ; exit 1)
      echo "Downloading Proton DB Info using Git"
      git clone https://github.com/bdefore/protondb-data.git &> /dev/null || (echo "Cannot download ProtonDB, error" ; exit 1)
    fi
  }

  rm -f "$PDBLOC"/reports/reports_piiremoved.json

  check_pdb
  cd "$PDBLOC"/reports || (echo "Proton DB download does not exit, error" ; exit 1)

  YEAR=$(find . | cut -d_ -f3 | sort -ru | head -n1)
  MONTH=$(find . | grep "$YEAR" | cut -d_ -f2 | sort -Mr | head -n1 | cut -b1-3)

  # If there is a new Proton DB, we should try to get it
  if [ "$MONTH" != "$(date +%b | tr '[:upper:]' '[:lower:]')" ]
  then
    cd ../.. || (echo "Failed to move up directories" ; exit 1)
    rm -rf "$PDBLOC"
    check_pdb

    cd "$PDBLOC"/reports || (echo "Reports folder does not exist for ProtonDB" ; exit 1)
    YEAR=$(find . | cut -d_ -f3 | sort -ru | head -n1)
    MONTH=$(find . | grep "$YEAR" | cut -d_ -f2 | sort -Mr | head -n1)
  fi

  TAR_FILENAME=$(find . | grep "$YEAR" | grep "$MONTH")
  echo "Most recent ProtonDB file appears to be: $TAR_FILENAME"
  tar -zxvf "$TAR_FILENAME" > /dev/null || (echo "Untarring the ProtonDB failed somehow" ; exit 1)
  jq -r '.[] | [.appId, .rating] | join(",")' "$PDBLOC"/reports/reports_piiremoved.json > /var/tmp/Steamy_Cats/PDB.csv
}

#######################################################################################
#### Category List                                                                 ####
#######################################################################################

category_list() {
  mkdir -p ~/.config/Steamy_Cats/
  echo "# List of all categories that games are assigned"
  echo "# To skip over unwanted categories, save category names to ~/.config/Steamy_Cats/exclude.conf"
  echo "# To limit the list to only those you want to include, save category names to ~/.config/Steamy_Cats/include.conf"
  echo "# Lines with comments will be ignored."
  grep -P $'\t\t\t\t\t\t\t\"\d*\"\t\t\"(?!favorite)' /var/tmp/newconfig.vdf |\
    cut -d\" -f4 | sort -u
}

#######################################################################################
#### Check if the config is valid                                                  ####
#######################################################################################

check_valid() {
  local BRACKETS PDB_PLAT NATIVECOUNT
  BRACKETS="$(tr -cd '{}' < "$1")"
  while [[ "$BRACKETS" = *'{}'* ]]
  do
    BRACKETS="${BRACKETS//{}/}"
  done

  if [ "$BRACKETS" == "" ]
  then
    echo "The configuration has some problems with matching brackets..."
    echo "Emergency surgery is required on the script immediately."
    echo "Here are your brackets back: $BRACKETS"
    exit 1
  else
    # If we are looking at the new config, do a count of what we have
    if [ "$1" == "/var/tmp/newconfig.vdf" ]
    then
      PDB_PLAT="$(grep PDB\ MODE\ Platinum /var/tmp/newconfig.vdf | sort -n | uniq -c | awk '{print  $1}')"
      NATIVECOUNT="$(grep APP\ NATIVE\ LINUX /var/tmp/newconfig.vdf | sort -n | uniq -c | awk '{print  $1}')"
      echo "PDB Platinum Ratings: $PDB_PLAT :: Native Games: $NATIVECOUNT"
      echo "Any missing games should be added to a group, such as ALL, and then the script rerun"
      echo "Old config backed up to /var/tmp/oldconfig.vdf"
      echo "New config written. To apply, run the below command:"
      echo "cp /var/tmp/newconfig.vdf $2"
    fi
  fi
}

#######################################################################################
#### Assemble Final Configurations                                                 ####
#######################################################################################

assemble_steam_config() {
  local apps_begin apps_end hidden is_hidden
  echo "Creating final configuration"

  # Dealing with games that are hidden
  cd /var/tmp/Steamy_Cats/fragments/ || exit 1
  is_hidden="$(grep -l $'\t\t\t\t\t\t"Hidden"' -- *)"
  if [ "$is_hidden" != "" ] ; then
    while read -r hidden ; do
      echo "We got here with $hidden"
      {
        head -n2 "$hidden"
        printf "\t\t\t\t\t\t\"Hidden\"\t\t\"1\"\n"
        tail -n+3 "$hidden" | grep -v $'\t\t\t\t\t"Hidden"\t\t"1"'
      } >> /var/tmp/Steamy_Cats/hidden_managed
    done <<< "$is_hidden"
  fi
  grep -L $'\t\t\t\t\t\t"Hidden"' -- * | xargs cat >> /var/tmp/Steamy_Cats/hidden_managed

  let apps_begin=$(grep -n \"Apps\" "$1" | cut -d: -f1)+1

  let apps_end=$(awk '/^\t\t\t\t"Apps"$/{f=1;next} f&&/^\t\t\t\t}$/{print NR;f=0}' "$1")

  # Attaching the top of the config
  head -n"$apps_begin" "$1" > /var/tmp/newconfig.vdf

  if [ -f "$INCLUDE_FILE" ]
  then
    # We are going to get a diff of what we have and what we want, then get rid of the difference
    grep -P $'\t\t\t\t\t\t\t\"\d*\"\t\t\"(?!favorite)' /var/tmp/Steamy_Cats/hidden_managed | cut -d\" -f4 | sort -u > /var/tmp/Steamy_Cats/List
    grep -v "^#" "$INCLUDE_FILE" > /var/tmp/Steamy_Cats/Includes
    grep -hvf /var/tmp/Steamy_Cats/Includes /var/tmp/Steamy_Cats/List > /var/tmp/Steamy_Cats/Diff
    grep -vhf /var/tmp/Steamy_Cats/Diff /var/tmp/Steamy_Cats/hidden_managed > /var/tmp/Steamy_Cats/tempconfig.vdf
  else
    cat /var/tmp/Steamy_Cats/hidden_managed > /var/tmp/Steamy_Cats/tempconfig.vdf
  fi

  if [ -f "$EXCLUDE_FILE" ]
  then
    grep -v "^#" "$EXCLUDE_FILE" > /var/tmp/Steamy_Cats/Excludes
    grep -hvf /var/tmp/Steamy_Cats/Excludes /var/tmp/Steamy_Cats/tempconfig.vdf >> /var/tmp/newconfig.vdf
  else
    cat /var/tmp/Steamy_Cats/tempconfig.vdf >> /var/tmp/newconfig.vdf
  fi

  # Adding the bottom of the config
  tail -n+"$apps_end" "$1" >> /var/tmp/newconfig.vdf
}

#######################################################################################
#### Help Output                                                                   ####
#######################################################################################

helpoutput() {
  echo "Steamy Cats is a script to categorize and organize Steam games
  Options include:
  --debug : Turn on lots of things to exit on error and show commands being ran
  You should also consider --sequential with --debug for more meaningful output
  --profiler : Prepends timestamp and shows all commands ran
  Intended to be redirected to file for profiling of code
  --ignore-old-categories : Gets rid of all category configuration while retaining favorites
    Shell Variable: WIPE_CONFIG
  --clear-whole-config : Preserves nothing from old configuration
    Shell Variable: FRESH_CONFIG
  --clean-dls : Gets rid of failed downloads and tries again
    Shell Variable: CLEAN_DLS
  --category-list : Returns the list of categories available
  --vdf-file : Name of a VDF configuration to use instead of the script discovered one
  Usage: --vdf-file=/path/to/file.vdf
    Shell Variable: VDFOVERRIDE
  --steam-user-id : The numeric USER ID for your Steam account
  Usage: --steam-user-id=77777777777777777
    Shell Variable: WEBACCNUM
  --comm-html : Download your own community page instead of making it public
  Usage: --comm-html=/path/to/steamcommunity.html
    Shell Variable: COMM_DOWNLOAD
  --user : User number to execute the script with, instead of inputting after running
  Usage: --user=\$USERNUM
    Shell Variable: USERNUM
  --include-file : Location of the file containing a list of categories to include
  Usage: --include-file=\$FILENAME
    Shell Variable: INCLUDE_FILE
  --exclude-file : Location of the file containing a list of categories to exclude
  Usage: --exclude-file=\$FILENAME
    Shell Variable: EXCLUDE_FILE"
}

#######################################################################################
#### Find our config                                                               ####
#######################################################################################

find_config() {
  which_user() {
    local NAMES NUMNAMES line num
    NAMES="$(grep PersonaName ~/.steam/steam/userdata/*/config/localconfig.vdf | cut -d\" -f4)"
    NUMNAMES="$(wc -l <<< "$NAMES")"

    if [ "$NUMNAMES" -gt 1 ]
    then
      if [ "$USERNUM" == "false" ]
      then
        echo "$NUMNAMES possible users to make Steam categories for:"
        NUMCYCLE=1
        while read -r line
        do
          echo "$NUMCYCLE : $line"
          let NUMCYCLE=$NUMCYCLE+1
        done <<< "$NAMES"

        read -rp "Enter the number for the user you want to use. Answer: " WHICHSTEAM
      else
        WHICHSTEAM="$USERNUM"
      fi

      num='^[0-9]+$'
      if ! [[ $WHICHSTEAM =~ $num ]]
      then
        echo "Response must be a number. Run the script again."
        exit 1
      fi

      WHICHACC=$(echo "$NAMES" | sed -n "$WHICHSTEAM"p)
    else
      WHICHSTEAM=1
      WHICHACC="$NAMES"
    fi
  }

  if [ "$VDFOVERRIDE" == "false" ]
  then
    # Parse out which user directory we are using
    which_user

    # We should check to see if the username can be found in users
    # If the name has been changed and no Steam restart, had an error
    if grep -qFB3 "$WHICHACC" ~/.steam/steam/config/loginusers.vdf
    then
      WEBACCNUM=$(grep -FB3 "$WHICHACC" ~/.steam/steam/config/loginusers.vdf | head -n1 | cut -d\" -f2)
    else
      echo "We can't find your username, try restarting Steam"
      echo "This can happen if you changed your username or have not logged in for a while"
      exit 1
    fi

    echo "We are using: $WHICHACC :: $WEBACCNUM"

    OUR_CONFIG="$(grep -H PersonaName ~/.steam/steam/userdata/*/config/localconfig.vdf | sed -n "$WHICHSTEAM"p \
      | cut -d: -f1 | sed 's/config\/localconfig\.vdf//')7/remote/sharedconfig.vdf"
  else
    OUR_CONFIG="$VDFOVERRIDE"
    echo "Not discovering Steam User ID Number, set with --steam-user-id switch"
    echo "Currently set to: $WEBACCNUM"
  fi
}

#######################################################################################
#### CLI switches                                                                  ####
#######################################################################################

parse_args() {
  local CLI_ARGS=("$@") cliarg

  for cliarg in "${CLI_ARGS[@]}"
  do
    case "$cliarg" in
      "--debug")
        set -x
        trap 'echo "Script Exited, files not cleaned up"' EXIT
        ;;
      "--profiler")
        set -x
        PS4='+ $(date "+%s.%N ($LINENO) ")'
        ;;
      "--ignore-old-categories")
        WIPE_CONFIG="true"
        ;;
      "--clear-whole-config")
        FRESH_CONFIG="true"
        ;;
      "--clean-dls")
        CLEAN_DLS="true"
        ;;
      "--category-list")
        category_list
        exit
        ;;
      "--vdf-file"*)
        VDFOVERRIDE="$( cut -d= -f2 <<< "$cliarg")"
        echo "Using the VDF Config file $VDFOVERRIDE"
        ;;
      "--steam-user-id"*)
        WEBACCNUM="$(cut -d= -f2 <<< "$cliarg")"
        echo "Using the Steam User ID $WEBACCNUM"
        ;;
      "--comm-html"*)
        COMM_DOWNLOAD="$(cut -d= -f2 <<< "$cliarg")"
        COMM_DOWNLOAD="${COMM_DOWNLOAD/#\~/$HOME}"
        echo "Using the Steam Community HTML at $COMM_DOWNLOAD"
        ;;
      "--include-file"*)
        INCLUDE_FILE="$(cut -d= -f2 <<< "$cliarg")"
        INCLUDE_FILE="${INCLUDE_FILE/#\~/$HOME}"
        echo "Only including categories found in $INCLUDE_FILE"
        ;;
      "--exclude-file"*)
        EXCLUDE_FILE="$(cut -d= -f2 <<< "$cliarg")"
        EXCLUDE_FILE="${EXCLUDE_FILE/#\~/$HOME}"
        echo "Removing categories found in $EXCLUDE_FILE"
        ;;
      "--user"*)
        USERNUM="$(cut -d= -f2 <<< "$cliarg")"
        echo "Command line passed user number: $USERNUM"
        ;;
      "--help")
        helpoutput
        exit
        ;;
      *)
        echo "Unknown option: $cliarg"
        helpoutput
        exit
        ;;
    esac
  done
}

#######################################################################################
#### Main Logic                                                                    ####
#######################################################################################

main() {
  parse_args "$@"

  local OUR_CONFIG="Not Found"

  # Identify what VDF config file we are going to use
  find_config

  echo "Our config file is: $OUR_CONFIG"

  if [ ! -e "$OUR_CONFIG" ]
  then
    echo "We can't find the config file: $OUR_CONFIG"
    echo "This is important, so we are quitting."
    exit 1
  fi

  if ! check_valid "$OUR_CONFIG"
  then
    tput bold
    echo "The configuration at $OUR_CONFIG fails validation"
    tput sgr0
  fi

  cp "$OUR_CONFIG" /var/tmp/oldconfig.vdf || (echo "Copying config failed, not doing anything more" ; exit 1)

  # This should only go on the first run, saving original untouched just in case
  if [ ! -f "$OUR_CONFIG"~ ]
  then
    echo "This is our first time running, preserving original config"
    cp "$OUR_CONFIG" "$OUR_CONFIG"~ || (echo "Preserve Original File Failed!" ; exit 1)
  fi

  # Make config file sections for each game
  # We also parse the current config and write it to those files
  parse_config "$OUR_CONFIG" || (echo "Could not create new config fragments" ; exit 1)

  # Download store pages for all the games
  download_store || (echo "Could not download Steam Store info" ; exit 1)

  # We download the ProtonDB info from github
  download_proton_db || (echo "Could not download ProtonDB info" ; exit 1)

  # This is where we parse the store pages and ProtonDB info and write it to our game files
  make_categories || (echo "Failed to make new configs for games" ; exit 1)

  # We take the original config and replace the "Apps" section with the one we just made
  # This function takes the start of the config, our game files, and the end and combines it
  assemble_steam_config "$OUR_CONFIG" || (echo "Failed to assemble our config" ; exit 1)

  # Verify our config is valid
  check_valid "/var/tmp/newconfig.vdf" "$OUR_CONFIG" || (echo "Config has invalid syntax!" ; exit 1)
}

main "$@"
