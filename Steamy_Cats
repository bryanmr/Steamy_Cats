#!/bin/bash
# shellcheck disable=SC2059
# Steamy Cats is a script to organize your Steam library

# You can set variables here, or pass command line arguments
# Check --help to learn how to set the below variables
WIPE_CONFIG="false"
FRESH_CONFIG="false"
USERNUM="false"
USER_VDF="false"
WEBACCNUM="false"
COMM_DOWNLOAD="false"
INCLUDE_FILE="$HOME/.config/Steamy_Cats/include.conf"
EXCLUDE_FILE="$HOME/.config/Steamy_Cats/exclude.conf"

######################################################################
#### Start Script (No variables below here)                       ####
######################################################################

parse_config() {
  community_profile() {
    local appid games_list
    if [ "$COMM_DOWNLOAD" == "false" ]
    then
      echo "Downloading your community profile, if public, and then getting full list of games you own"
      curl -sLo /var/tmp/Steamy_Cats/Community_Profile \
        "https://steamcommunity.com/profiles/$WEBACCNUM/games/?tab=all" ||\
        oops "Failed to download community profile"
    else
      cp "$COMM_DOWNLOAD" /var/tmp/Steamy_Cats/Community_Profile ||\
        oops Failed to copy community profile
    fi

    # Find the JSON containing our games, then extract the APP ID with JQ
    games_list="$(grep "var rgGames" /var/tmp/Steamy_Cats/Community_Profile | \
      sed -e 's/var rgGames \= \[//' -e 's/\]\;//' -e 's/\,[{]/\n\{/g' | jq '.appid' | grep '[0-9]')"
    if [ "$games_list" == "" ]
    then
      tput bold
      echo "Is your community profile private? Check in a private browser: https://steamcommunity.com/profiles/$WEBACCNUM/games/?tab=all"
      echo "You can download the file manually and run the script with --comm-html=/path/to/file"
      echo "Alternatively, you can add all games to a group so they show up in your local configuration"
      tput sgr0
    else
      while read -r appid
      do
        {
          printf "\t\t\t\t\t\"%s\"\n" "$appid"
          printf "\t\t\t\t\t{\n"
          printf "\t\t\t\t\t\t\"%s\"\n" "tags"
          printf "\t\t\t\t\t\t{\n"
        } > /var/tmp/Steamy_Cats/fragments/"$appid"
      done <<< "$games_list"
    fi
    echo -n "$(wc -w <<< "$games_list") games in profile :: "
  }

  copy_config() {
    local apps_section games tags_missing check_tags
    if [ "$WIPE_CONFIG" == "true" ] ; then
      # Requires pgrep with lookahead support to preserve favorites
      apps_section=$(awk '/^\t\t\t\t\t}$/{next}
      /^\t\t\t\t\t\t}$/{next}
      /^\t\t\t\t"Apps"$/{f=1;next}
      f&&/^\t\t\t\t\t"[0-9]+"$/{n=1;print;next}
      n&&/^\t\t\t\t}$/{n=0;f=0} ; n' "$1" |\
        grep -Pv $'\t\t\t\t\t\t\t\"\d*\"\t\t\"(?!favorite)')
    else
      # We are removing categories we create here
      apps_section=$(awk '/^\t\t\t\t\t}$/{next}
      /^\t\t\t\t\t\t}$/{next}
      /^\t\t\t\t"Apps"$/{f=1;next}
      f&&/^\t\t\t\t\t"[0-9]+"$/{n=1;print;next}
      n&&/^\t\t\t\t}$/{n=0;f=0} ; n' "$1" |\
        grep -v -e '"TAGS ' -e '"SFLAGS ' -e '"APP ' -e '"PDB ' -e '"RELEASE ' -e '"REVIEW ')
    fi

    awk '/^\t\t\t\t\t"[0-9]+"$/ {split($0,a,"\"");print > "/var/tmp/Steamy_Cats/fragments/"a[2];next}
    {print >> "/var/tmp/Steamy_Cats/fragments/"a[2]}' <<< "$apps_section"

    check_tags="$(cd /var/tmp/Steamy_Cats/fragments/ &&\
      grep -L $'\t\t\t\t\t\"tags\"' -- *)"
    if [ "$check_tags" != "" ] ; then
      while read -r tags_missing ; do
        printf "\t\t\t\t\t\t\"tags\"\n" >> /var/tmp/Steamy_Cats/fragments/"$tags_missing"
        printf "\t\t\t\t\t\t{\n" >> /var/tmp/Steamy_Cats/fragments/"$tags_missing"
      done <<< "$check_tags"
    fi

    games=$(grep $'^\t\t\t\t\t\"[0-9]' <<< "$apps_section" | cut -d\" -f2)
    echo "Preserved configuration for $(wc -w <<< "$games") games."
  }

  community_profile || oops "Failed to write community profile"

  if [ "$FRESH_CONFIG" == "true" ] ; then
    echo ; return
  else
    copy_config "$@" || oops "Failed to copy old configuration"
  fi
}
download_store() {
  local DLOC="$HOME/.local/share/steam_store_frontend/" \
  TLOC="https://store.steampowered.com/app/" \
  NUMEXISTS=0 DOWNLOADING=0 DL_LIST="" DOWNLOADED=0 \
  DL_COUNT SLEEP_NOW i

  cleandls() {
    cd "$DLOC" || oops "Download location does not exist."
    if [ ! "$(ls -A)" ]; then return ; fi

    if grep -q '>Error<' -- *
    then
      echo "Some files had errors. Deleting"
      set -x
      grep -Zl '>Error<' -- * | xargs --null rm
      set +x
      echo "Done deleting files."
    fi

    # Files from being rate limited should be deleted
    if grep -q '>Access Denied<' -- *
    then
      echo "API rate limit hit? Deleting some files."
      set -x
      grep -Zl '>Access Denied<' -- * | xargs --null rm
      set +x
      echo "Done deleting files."
    fi
  }

  mkdir -p "$DLOC"
  cleandls

  # We gather the list of files to be downloaded
  cd /var/tmp/Steamy_Cats/fragments || oops "Our fragment location is missing"
  for i in *
  do 
    if [ ! -e "$DLOC""$i".html ]
    then
      DL_LIST="$DL_LIST $i"
      let DOWNLOADING=$DOWNLOADING+1
    else
      let NUMEXISTS=$NUMEXISTS+1
    fi
  done

  if [ "$(wc -w <<< "$DL_LIST")" -lt 1 ]
  then
    echo "All downloads completed already. Check $DLOC if something is wrong."
  else
    if [ "$(wc -w <<< "$DL_LIST")" -gt 25 ]
    then
      echo "Downloading $(wc -w <<< "$DL_LIST") files" && echo
    else
      echo "Downloading files for these game IDs: $DL_LIST" && echo
    fi

    for i in $DL_LIST
    do
      let DOWNLOADED=$DOWNLOADED+1

      # We check to see if we have 10 downloads going here
      # This is due to Steam rate limiting our downloads
      let SLEEP_NOW=$DOWNLOADED%10
      if [[ $SLEEP_NOW -eq 0 ]]
      then
        let DL_COUNT=$DOWNLOADED-1
        tput cuu 1 && tput el # Using this to overwrite previous line
        echo "SLEEPING (DL RATE LIMIT) $DL_COUNT downloads started of $DOWNLOADING total"
        wait
        sleep 1
      fi

      curl -L --cookie "mature_content=1 ; birthtime=-729000000" -s -o "$DLOC""$i".html "$TLOC$i" &
      tput cuu 1 && tput el # Using this to overwrite previous line
      echo "$DOWNLOADED downloads started of $DOWNLOADING total"
    done

    wait

    cleandls
    echo "Downloads complete for the Store Frontend."
  fi
}
make_categories() {
  local line="\t\t\t\t\t\t\t\"%s\"\t\t\"%s\"\n"

  write_proton_db_scores() {
    local pdb_mean pdb_mode

    # Mode
    if ! grep -q "^$1," /var/tmp/Steamy_Cats/PDB.csv
    then
      printf "$line" "301" "PDB UNRATED" >> /var/tmp/Steamy_Cats/fragments/"$1"
      return
    else
      pdb_mode="$(grep "^$1," /var/tmp/Steamy_Cats/PDB.csv | sort | uniq -c | sort -nr | head -n1 | cut -d, -f2)"
      printf "$line" "301" "PDB MODE $pdb_mode" >> /var/tmp/Steamy_Cats/fragments/"$1"
    fi

    # Mean
    pdb_mean="$(grep "^$1," /var/tmp/Steamy_Cats/PDB.csv |\
      sed -e 's/Platinum/4/' -e 's/Gold/3/' -e 's/Silver/2/' -e 's/Bronze/1/' -e 's/Borked/0/' |\
      awk -F "," '{n++;sum+=$2} END {print n? int((sum/n)+.5) :"Error"}' |\
      sed -e 's/4/Platinum/' -e 's/3/Gold/' -e 's/2/Silver/' -e 's/1/Bronze/' -e 's/0/Borked/'
    )" # I have a feeling this whole thing can be done in awk, so that is a todo
    printf "$line" "302" "PDB MEAN $pdb_mean" >> /var/tmp/Steamy_Cats/fragments/"$1"
  }
  finalize_fragments() {
    local all_checked game_needs_all which_game
    cd /var/tmp/Steamy_Cats/fragments/ || oops "Our fragment location is missing"
    #      echo "~FAILED~" > "$HOME/.local/share/steam_store_frontend/$1.html"

    # Writing the ALL group where it is missing
    all_checked="$(grep -L '"ALL"' -- *)"
    if [ "$all_checked" != "" ] ; then
      while read -r game_needs_all ; do
        printf "$line" "330" "ALL" >> /var/tmp/Steamy_Cats/fragments/"$game_needs_all"
      done <<< "$all_checked"
    fi

    # Writing the closing brackets
    for which_game in * ; do
      printf "\t\t\t\t\t\t}\n" >> /var/tmp/Steamy_Cats/fragments/"$which_game"
      printf "\t\t\t\t\t}\n" >> /var/tmp/Steamy_Cats/fragments/"$which_game"
    done
  }
  linux_native() {
    local which_game
    grep -Hl 'data-os="linux">' -- * | cut -d. -f1 > /var/tmp/Steamy_Cats/Linux
    grep -m1 -H '<div class="game_area_purchase_platform">' -- * |\
      grep '<span class="platform_img linux">' | cut -d. -f1 >> /var/tmp/Steamy_Cats/Linux
    curl -s https://raw.githubusercontent.com/SteamDatabase/SteamLinux/master/GAMES.json |\
      cut -d\" -f2 "$HOME"/.local/share/SteamLinux.json | grep '[0-9]' >> /var/tmp/Steamy_Cats/Linux

    while read -r which_game ; do
      if [ -f /var/tmp/Steamy_Cats/fragments/"$which_game" ] ; then
        printf "$line" "301" "APP NATIVE LINUX" >> /var/tmp/Steamy_Cats/fragments/"$which_game"
      fi
    done <<< "$(sort -u /var/tmp/Steamy_Cats/Linux)"
  }
  pdb_if_not_linux() {
    local which_game
    while read -r which_game ; do
      write_proton_db_scores "$which_game" || oops "ProtonDB score failed" &
    done <<< "$(cd /var/tmp/Steamy_Cats/fragments/ && grep -L LINUX -- *)"
    wait
  }
  rel_date() {
    local which_game rel_year
    while IFS="." read -r which_game rel_year ; do
      if [ -f /var/tmp/Steamy_Cats/fragments/"$which_game" ] ; then
        printf "$line" "340" "RELEASE $rel_year" >> /var/tmp/Steamy_Cats/fragments/"$which_game"
      fi
    done <<< "$(grep -H "<b>Release Date:" -- * | sed -nr 's/([0-9]*\.).*([0-9]{4}).*/\1\2/p')"
  }
  reviews() {
    local which_game rev_score
    while IFS="~" read -r which_game rev_score ; do
      if [ -f /var/tmp/Steamy_Cats/fragments/"$which_game" ] ; then
        printf "$line" "350" "REVIEW $rev_score" >> /var/tmp/Steamy_Cats/fragments/"$which_game"
      fi
    done <<< "$(grep -HA1 "Overall Reviews:" -- * | grep "game_review_summary" | grep -v "Need more user reviews" | sed 's/\..*\">/~/' | cut -d\< -f1)"
  }
  flag_adult() {
    local which_game
    while read -r which_game ; do
      if [ -f /var/tmp/Steamy_Cats/fragments/"$which_game" ] ; then
        printf "$line" "320" "SFLAGS ADULT" >> /var/tmp/Steamy_Cats/fragments/"$which_game"
      fi
    done <<< "$(grep -l "You must login to see this content." -- *.html | cut -d. -f1)"
  }
  user_tags() {
    local values countnum val
    while IFS="," read -ra values ; do
      if [ ! -f /var/tmp/Steamy_Cats/fragments/"${values[0]}" ] ; then
        continue
      else
        countnum=200
        for val in "${values[@]:1}"; do
          printf "$line" "$countnum" "TAGS $val" >> /var/tmp/Steamy_Cats/fragments/"${values[0]}"
          let countnum++
        done
      fi
    done <<< "$(grep "\[{\"tagid\":" -- * |\
      sed -E -e 's/\],/]}/' -e 's/\.html://' -e 's/([0-9]+)/{"\1":/' |\
      jq -cr 'keys[] as $keys | .[] | [$keys, .[].name] | join(",")')"
  }
  store_flags() {
    local values countnum val
    while IFS="," read -ra values ; do
      if [ ! -f /var/tmp/Steamy_Cats/fragments/"${values[0]}" ] ; then
        continue
      else
        countnum=100
        for val in "${values[@]:1}"; do
          printf "$line" "$countnum" "SFLAGS $val" >> /var/tmp/Steamy_Cats/fragments/"${values[0]}"
          let countnum++
        done
      fi
    done <<< "$(grep -F 'game_area_details_specs"' -- * |\
      grep -Eo -e '^[0-9]+' -e 'class="name"[^\>]*\>[^\<]*' |\
      cut -d\> -f2 | tr '\n' ',' | sed -E 's/([0-9]+)/\n\1/g' |\
      awk 'length' | sed 's/,$//')"
  }

  echo "Adding new category tags to the games!"
  cd "$HOME"/.local/share/steam_store_frontend/ || oops "Downloads location does not exist, can't parse"
  linux_native && pdb_if_not_linux
  rel_date
  reviews
  flag_adult
  user_tags
  store_flags
  finalize_fragments
}
download_proton_db() {
  local YEAR MONTH PDBLOC="$HOME/.local/share/protondb-data/" \
    TAR_FILENAME

  check_pdb() {
    if [ ! -d "$PDBLOC" ]
    then
      cd "$HOME"/.local/share/ || oops ".local/share does not exist, exiting"
      echo "Downloading Proton DB Info using Git"
      git clone https://github.com/bdefore/protondb-data.git &> /dev/null ||\
        oops "Cannot download ProtonDB, error"
    fi
  }

  rm -f "$PDBLOC"/reports/reports_piiremoved.json

  check_pdb
  cd "$PDBLOC"/reports || oops "Proton DB download does not exit, error"

  YEAR=$(find . | cut -d_ -f3 | sort -ru | head -n1)
  MONTH=$(find . | grep "$YEAR" | cut -d_ -f2 | sort -Mr | head -n1 | cut -b1-3)

  # If there is a new Proton DB, we should try to get it
  if [ "$MONTH" != "$(date +%b | tr '[:upper:]' '[:lower:]')" ]
  then
    cd ../.. || oops "Failed to move up directories"
    rm -rf "$PDBLOC"
    check_pdb

    cd "$PDBLOC"/reports || oops "Reports folder does not exist for ProtonDB"
    YEAR=$(find . | cut -d_ -f3 | sort -ru | head -n1)
    MONTH=$(find . | grep "$YEAR" | cut -d_ -f2 | sort -Mr | head -n1)
  fi

  TAR_FILENAME=$(find . | grep "$YEAR" | grep "$MONTH")
  echo "Most recent ProtonDB file appears to be: $TAR_FILENAME"
  tar -zxvf "$TAR_FILENAME" > /dev/null || oops "Untarring the ProtonDB failed somehow"
  jq -r '.[] | [.appId, .rating] | join(",")' "$PDBLOC"/reports/reports_piiremoved.json > /var/tmp/Steamy_Cats/PDB.csv
}
category_list() {
  mkdir -p ~/.config/Steamy_Cats/
  echo "# List of all categories that games are assigned"
  echo "# To skip over unwanted categories, save category names to ~/.config/Steamy_Cats/exclude.conf"
  echo "# To limit the list to only those you want to include, save category names to ~/.config/Steamy_Cats/include.conf"
  echo "# Lines with comments will be ignored."
  grep -P $'\t\t\t\t\t\t\t\"\d*\"\t\t\"(?!favorite)' /var/tmp/newconfig.vdf |\
    cut -d\" -f4 | sort -u
}
check_valid() {
  local brackets
  brackets="$(tr -cd '{}' < "$1" | sed ':loop;s/{}//g;t loop')"
  quotes="$(tr -cd '"' < "$1" | sed 's/""//g')"

  if [ "$brackets" != "" ] || [ "$quotes" != "" ]
  then
    echo "The configuration has some errors."
    echo "Here are your unmatched brackets: $brackets"
    echo "Here are your unmatched quotes: $quotes"
    oops "Configuration file $1 invalid"
  fi
}
assemble_steam_config() {
  local apps_begin apps_end hidden is_hidden
  echo "Creating final configuration"

  # Dealing with games that are hidden
  cd /var/tmp/Steamy_Cats/fragments/ || oops "Our fragments location missing"
  is_hidden="$(grep -l $'\t\t\t\t\t\t"Hidden"' -- *)"
  if [ "$is_hidden" != "" ] ; then
    while read -r hidden ; do
      {
        head -n2 "$hidden"
        printf "\t\t\t\t\t\t\"Hidden\"\t\t\"1\"\n"
        tail -n+3 "$hidden" | grep -v $'\t\t\t\t\t"Hidden"\t\t"1"'
      } >> /var/tmp/Steamy_Cats/hidden_managed
    done <<< "$is_hidden"
  fi
  grep -L $'\t\t\t\t\t\t"Hidden"' -- * | xargs cat >> /var/tmp/Steamy_Cats/hidden_managed

  let apps_begin=$(grep -n \"Apps\" "$1" | cut -d: -f1)+1

  let apps_end=$(awk '/^\t\t\t\t"Apps"$/{f=1;next} f&&/^\t\t\t\t}$/{print NR;f=0}' "$1")

  # Attaching the top of the config
  head -n"$apps_begin" "$1" > /var/tmp/newconfig.vdf

  if [ -f "$INCLUDE_FILE" ]
  then
    # We are going to get a diff of what we have and what we want, then get rid of the difference
    grep -P $'\t\t\t\t\t\t\t\"\d*\"\t\t\"(?!favorite)' /var/tmp/Steamy_Cats/hidden_managed | cut -d\" -f4 | sort -u > /var/tmp/Steamy_Cats/List
    grep -v "^#" "$INCLUDE_FILE" > /var/tmp/Steamy_Cats/Includes
    grep -hvf /var/tmp/Steamy_Cats/Includes /var/tmp/Steamy_Cats/List > /var/tmp/Steamy_Cats/Diff
    grep -vhf /var/tmp/Steamy_Cats/Diff /var/tmp/Steamy_Cats/hidden_managed > /var/tmp/Steamy_Cats/tempconfig.vdf
  else
    cat /var/tmp/Steamy_Cats/hidden_managed > /var/tmp/Steamy_Cats/tempconfig.vdf
  fi

  if [ -f "$EXCLUDE_FILE" ]
  then
    grep -v "^#" "$EXCLUDE_FILE" > /var/tmp/Steamy_Cats/Excludes
    grep -hvf /var/tmp/Steamy_Cats/Excludes /var/tmp/Steamy_Cats/tempconfig.vdf >> /var/tmp/newconfig.vdf
  else
    cat /var/tmp/Steamy_Cats/tempconfig.vdf >> /var/tmp/newconfig.vdf
  fi

  # Adding the bottom of the config
  tail -n+"$apps_end" "$1" >> /var/tmp/newconfig.vdf
}
helpoutput() {
  echo "Steamy Cats is a script to categorize and organize Steam games
  Options include:
  --debug : Turn on lots of things to exit on error and show commands being ran
  You should also consider --sequential with --debug for more meaningful output
  --profiler : Prepends timestamp and shows all commands ran
  Intended to be redirected to file for profiling of code
  --ignore-old-categories : Gets rid of all category configuration while retaining favorites
    Shell Variable: WIPE_CONFIG
  --clear-whole-config : Preserves nothing from old configuration
    Shell Variable: FRESH_CONFIG
  --category-list : Returns the list of categories available
  --vdf-file : Name of a VDF configuration to use instead of the script discovered one
  Usage: --vdf-file=/path/to/file.vdf
    Shell Variable: USER_VDF
  --steam-user-id : The numeric USER ID for your Steam account
  Usage: --steam-user-id=77777777777777777
    Shell Variable: WEBACCNUM
  --comm-html : Download your own community page instead of making it public
  Usage: --comm-html=/path/to/steamcommunity.html
    Shell Variable: COMM_DOWNLOAD
  --user : User number to execute the script with, instead of inputting after running
  Usage: --user=\$USERNUM
    Shell Variable: USERNUM
  --include-file : Location of the file containing a list of categories to include
  Usage: --include-file=\$FILENAME
    Shell Variable: INCLUDE_FILE
  --exclude-file : Location of the file containing a list of categories to exclude
  Usage: --exclude-file=\$FILENAME
    Shell Variable: EXCLUDE_FILE"
}
find_config() {
  local listnum steam_account_name user_names

  user_names="$(grep PersonaName \
    ~/.steam/steam/userdata/*/config/localconfig.vdf | cut -d\" -f4)"

  gen_user_menu() {
    local num_names username times_through=1
    num_names="$(wc -l <<< "$user_names")"
    if [ "$num_names" -gt 1 ] && [ "$USERNUM" == "false" ] ; then
      echo "$num_names possible users to make Steam categories for:"

      while read -r username ; do
        echo "$times_through : $username"
        let times_through++
      done <<< "$user_names"
    fi
  }
  which_user() {
    local list_position=1
    if [ "$(wc -l <<< "$user_names")" -gt 1 ] && [ "$USERNUM" == "false" ]; then
      read -rp \
        "Enter the number for the user you want to use. Answer: " list_position
    elif [ "$USERNUM" != "false" ] ; then
      list_position="$USERNUM"
    fi

    if ! [[ $list_position =~ ^[0-9]+$ ]] ; then
      oops "Response must be a number. Run the script again."
    fi

    echo "$list_position"
  }

  if [ "$USER_VDF" == "false" ] ; then
    gen_user_menu || oops Generating the user menu failed
    if ! listnum="$(which_user)" ; then
      oops Failed to set which user to use
    fi

    steam_account_name=$(echo "$user_names" | sed -n "$listnum"p)

    grep -qFB3 "$steam_account_name" ~/.steam/steam/config/loginusers.vdf ||\
      oops "We can't find your username, try restarting Steam"

    # This is a global variable
    if [ "$WEBACCNUM" == "false" ] ; then
      WEBACCNUM=$(grep -FB3 "$steam_account_name" ~/.steam/steam/config/loginusers.vdf | head -n1 | cut -d\" -f2)
    fi

    echo "We are using: $steam_account_name :: $WEBACCNUM"

    # This is a globale variable
    USER_VDF="$(grep -H PersonaName \
      ~/.steam/steam/userdata/*/config/localconfig.vdf |\
      sed -n "$listnum"p |\
      cut -d: -f1 |\
      sed 's/config\/localconfig\.vdf//')7/remote/sharedconfig.vdf"
  elif [ "$WEBACCNUM" == "false" ] && [ "$USER_VDF" != "false" ] ; then
      oops You have to set the WEBACCNUM if you manually set USER_VDF
  else
    echo "VDF file set by CLI to: $USER_VDF"
    echo "Steam User ID Number by --steam-user-id set to: $WEBACCNUM"
  fi
}
parse_args() {
  local CLI_ARGS=("$@") cliarg

  for cliarg in "${CLI_ARGS[@]}"
  do
    case "$cliarg" in
      "--debug")
        set -x
        trap 'echo "Script Exited, files not cleaned up"' EXIT
        ;;
      "--profiler")
        set -x
        PS4='+ $(date "+%s.%N ($LINENO) ")'
        ;;
      "--ignore-old-categories")
        WIPE_CONFIG="true"
        ;;
      "--clear-whole-config")
        FRESH_CONFIG="true"
        ;;
      "--category-list")
        category_list
        exit
        ;;
      "--vdf-file"*)
        USER_VDF="$( cut -d= -f2 <<< "$cliarg")"
        echo "Using the VDF Config file $USER_VDF"
        ;;
      "--steam-user-id"*)
        WEBACCNUM="$(cut -d= -f2 <<< "$cliarg")"
        echo "Using the Steam User ID $WEBACCNUM"
        ;;
      "--comm-html"*)
        COMM_DOWNLOAD="$(cut -d= -f2 <<< "$cliarg")"
        COMM_DOWNLOAD="${COMM_DOWNLOAD/#\~/$HOME}"
        echo "Using the Steam Community HTML at $COMM_DOWNLOAD"
        ;;
      "--include-file"*)
        INCLUDE_FILE="$(cut -d= -f2 <<< "$cliarg")"
        INCLUDE_FILE="${INCLUDE_FILE/#\~/$HOME}"
        echo "Only including categories found in $INCLUDE_FILE"
        ;;
      "--exclude-file"*)
        EXCLUDE_FILE="$(cut -d= -f2 <<< "$cliarg")"
        EXCLUDE_FILE="${EXCLUDE_FILE/#\~/$HOME}"
        echo "Removing categories found in $EXCLUDE_FILE"
        ;;
      "--user"*)
        USERNUM="$(cut -d= -f2 <<< "$cliarg")"
        echo "Command line passed user number: $USERNUM"
        ;;
      "--help")
        helpoutput
        exit
        ;;
      *)
        echo "Unknown option: $cliarg"
        helpoutput
        exit 1
        ;;
    esac
  done
}
oops() {
  tput bold
  echo "Exit Code: $? ~~ Last Command: $this_command"
  echo "$@"
  tput sgr0
  exit 1
}
main() {
  set -uEeo pipefail
  renice 19 $$ > /dev/null
  this_command="false"
  previous_command="false"
  trap 'previous_command=$this_command; this_command=$BASH_COMMAND' DEBUG
  trap 'rm -rf "/var/tmp/Steamy_Cats/"' EXIT
  trap 'echo "Exit Code: $? ~~ Last Command: $previous_command" ; exit 1' ERR

  type jq > /dev/null || oops Script requires jq to be installed
  type git > /dev/null || oops Script requires git to be installed

  rm -rf /var/tmp/Steamy_Cats/
  mkdir -p /var/tmp/Steamy_Cats/fragments/ /var/tmp/Steamy_Cats/rewrites/

  parse_args "$@" || oops Arguments invalid
  find_config || oops Could not find config

  echo "Our config file is: $USER_VDF"

  check_valid "$USER_VDF" ||\
    oops "The configuration at $USER_VDF fails validation"

  cp "$USER_VDF" /var/tmp/oldconfig.vdf || oops Config not found

  if [ ! -f "$USER_VDF"~ ] ; then
    echo "Copying original config to $USER_VDF~"
    cp "$USER_VDF" "$USER_VDF"~ || oops Could not copy config
  fi

  parse_config "$USER_VDF" || oops Parsing config failed
  download_store || oops Downloading store details failed
  download_proton_db || oops Downloading ProtonDB failed
  make_categories || oops Making categories failed
  assemble_steam_config "$USER_VDF" || oops Assembling final config failed
  check_valid "/var/tmp/newconfig.vdf" || oops Final config invalid

  pdb_plat="$(grep PDB\ MODE\ Platinum /var/tmp/newconfig.vdf |\
    sort -n | uniq -c | awk '{print  $1}')"
  native_count="$(grep APP\ NATIVE\ LINUX /var/tmp/newconfig.vdf |\
    sort -n | uniq -c | awk '{print  $1}')"
  echo "PDB Platinum Ratings: $pdb_plat :: Native Games: $native_count"
  echo "Games not getting categories? In Steam, add to a group."
  echo "All games that have a group in Steam will be found by script"
  echo
  echo "Old config backed up to /var/tmp/oldconfig.vdf"
  echo "Original config backed up to $USER_VDF~"
  echo "New config written. To apply, run the below command:"
  echo "cp /var/tmp/newconfig.vdf $USER_VDF"
}

main "$@"
